#!/usr/bin/env python3
# curl https://raw.githubusercontent.com/mshlain/test/refs/heads/main/setup/copilot_in_logs_bundle.py | python3

# this script sets up the current directory as it was a github repository
# so the developer could use copilot at 100% efficiency
#
# General requirements:
#   - write idempotent code
#   - do not use any external libraries
#   - follow clean code principles
#
# Feature #001
# First, it will create README.md file
# Then it will create .github directory
# Then it will create .github/instructions directory
# Then it will create .github/instructions/copilot.md file
# Then it will create .github/prompts directory
#
# Feature #002
# README.md file content should be generated by function
#
# Feature #003
# The script should create .github/prompts/analyze.prompt.md file
# with content from dedicated function
#

from pathlib import Path


def create_directory_if_not_exists(directory_path):
    """Create directory if it doesn't exist."""
    Path(directory_path).mkdir(parents=True, exist_ok=True)


def create_file_if_not_exists(file_path):
    """Create empty file if it doesn't exist."""
    if not Path(file_path).exists():
        Path(file_path).touch()


def generate_readme_content():
    """Generate content for the README.md file."""
    return """
# General
This folder contains logs collected from zerto system.

# Structure
- `customer_info.txt`: Contains general information about the customer, including Site Name

At the root of the folder you will find a folder named by site name, with following structure:
- 'Containers Logs': Contains logs from containers from the running system
- 'ZVM': this folder contains logs from the ZVM (Zerto Virtual Manager) service, which is responsible for managing the Zerto environment.

### Containers Logs
Most of the folders here contain logs from a specific container. Most important items are:
- `upgrade-analytics`: contains json summary file of every upgrade attempt. Upgrade bugs analysis should start from this file.
- 'ansible': this folder contains ansible logs from any ansible playbook run. This usually happens during initial deployment or upgrade.
- 'install': this folder contains logs from the installation process of the system.
- 'upgrade-service': this folder contains logs from the upgrade service container, which is responsible for upgrading the system.
    """


def create_file_with_content(file_path, content=""):
    """Create file with specified content if it doesn't exist."""
    if not Path(file_path).exists():
        Path(file_path).write_text(content)


def generate_analyze_prompt_content():
    """Generate content for the analyze.prompt.md file."""
    return """---
mode: agent
---

# Zerto Logs Analysis Prompt

You are an expert Zerto system administrator and troubleshooter. Analyze the provided log bundle to identify issues, root causes, and provide actionable recommendations.

## Analysis Framework

### 1. Initial Assessment
- Review customer_info.txt for environment context
- Identify the timeframe of the issue
- Determine the type of problem (upgrade, installation, performance, etc.)

### 2. Priority Areas to Examine
- **Upgrade Issues**: Start with upgrade-analytics folder for upgrade summary
- **Installation Problems**: Check install folder logs
- **Container Issues**: Review relevant container logs
- **ZVM Problems**: Examine ZVM service logs
- **Ansible Deployment**: Check ansible folder for deployment issues

### 3. Analysis Steps
1. Summarize the customer environment and reported issue
2. Identify error patterns and timestamps
3. Trace the sequence of events leading to the problem
4. Correlate logs across different components
5. Provide root cause analysis
6. Suggest specific remediation steps

### 4. Output Format
Provide a structured analysis with:
- Executive summary
- Technical findings
- Root cause identification
- Recommended actions
- Prevention measures

Focus on actionable insights and clear explanations that can be understood by both technical and non-technical stakeholders.

"""


def setup_github_structure():
    """Set up the GitHub repository structure for Copilot efficiency."""
    # Create README.md file
    readme_content = generate_readme_content()
    create_file_with_content("README.md", readme_content)

    # Create .github directory
    create_directory_if_not_exists(".github")

    # Create .github/instructions directory
    create_directory_if_not_exists(".github/instructions")

    # Create .github/instructions/copilot.md file (empty)
    create_file_if_not_exists(".github/instructions/copilot.md")

    # Create .github/prompts directory
    create_directory_if_not_exists(".github/prompts")

    # Create .github/prompts/analyze.prompt.md file with content
    analyze_prompt_content = generate_analyze_prompt_content()
    create_file_with_content(
        ".github/prompts/analyze.prompt.md", analyze_prompt_content
    )


if __name__ == "__main__":
    setup_github_structure()
    print("GitHub Copilot setup completed successfully!")

# python3 ./setup_copilot.py
