#!/usr/bin/env python3
# curl https://raw.githubusercontent.com/mshlain/test/refs/heads/main/setup/copilot_in_logs_bundle.py | python3

# this script sets up the current directory as it was a github repository
# so the developer could use copilot at 100% efficiency
#
# General requirements:
#   - write idempotent code
#   - do not use any external libraries
#   - follow clean code principles
#
# Feature #001
# First, it will create README.md file
# Then it will create .github directory
# Then it will create .github/instructions directory
# Then it will create .github/instructions/copilot.md file (empty)
# Then it will create .github/prompts directory
# Then it will create .github/prompts/analyze.md file (empty)
#
# Feature #002
# README.md file content should be generated by function
# that will return the content of the file as a string
# at the moment it will be empty
#

from pathlib import Path


def create_directory_if_not_exists(directory_path):
    """Create directory if it doesn't exist."""
    Path(directory_path).mkdir(parents=True, exist_ok=True)


def create_file_if_not_exists(file_path):
    """Create empty file if it doesn't exist."""
    if not Path(file_path).exists():
        Path(file_path).touch()


def generate_readme_content():
    """Generate content for the README.md file."""
    return """
# General
This folder contains logs collected from zerto system.

# Structure
- `customer_info.txt`: Contains general information about the customer, including Site Name

At the root of the folder you will find a folder named by site name, with following structure:
- 'Containers Logs': Contains logs from containers from the running system
- 'ZVM': this folder contains logs from the ZVM (Zerto Virtual Manager) service, which is responsible for managing the Zerto environment.

### Containers Logs
Most of the folders here contain logs from a specific container. Most important items are:
- `upgrade-analytics`: contains json summary file of every upgrade attempt. Upgrade bugs analysis should start from this file.
- 'ansible': this folder contains ansible logs from any ansible playbook run. This usually happens during initial deployment or upgrade.
- 'install': this folder contains logs from the installation process of the system.
- 'upgrade-service': this folder contains logs from the upgrade service container, which is responsible for upgrading the system.
    """

def create_file_with_content(file_path, content=""):
    """Create file with specified content if it doesn't exist."""
    if not Path(file_path).exists():
        Path(file_path).write_text(content)


def setup_github_structure():
    """Set up the GitHub repository structure for Copilot efficiency."""
    # Create README.md file
    readme_content = generate_readme_content()
    create_file_with_content("README.md", readme_content)

    # Create .github directory
    create_directory_if_not_exists(".github")

    # Create .github/instructions directory
    create_directory_if_not_exists(".github/instructions")

    # Create .github/instructions/copilot.md file (empty)
    create_file_if_not_exists(".github/instructions/copilot.md")

    # Create .github/prompts directory
    create_directory_if_not_exists(".github/prompts")

    # Create .github/prompts/analyze.md file (empty)
    create_file_if_not_exists(".github/prompts/analyze.md")


if __name__ == "__main__":
    setup_github_structure()
    print("GitHub Copilot setup completed successfully!")

# python3 ./setup_copilot.py
